To create the DSL code for your e-commerce website for selling high-end office chairs, I'll structure the code to define entities, actions, properties, and scenarios that meet your requirements. This includes a home page with a catalog of items, item detail pages, shopping cart and wishlist functionality, and checkout process.

```xtext
model OfficeChairsEcommerce

entity Product {
  properties: name, picture, price, description, reviews*
  actions: viewDetails, addToCart, addToWishlist
}

entity Cart {
  properties: items*
  actions: checkout
}

entity Wishlist {
  properties: items*
  actions: addToCart
}

Scenario: ViewingProductDetails
  Given the catalog of Products
  When I viewDetails for the Product
  Then the Product page shows name, picture, price, description, and reviews

Scenario: AddingProductToCart
  Given the Product page
  When I addToCart the Product
  Then the Product is in the Cart

Scenario: AddingProductToWishlist
  Given the Product page
  When I addToWishlist the Product
  Then the Product is in the Wishlist

Scenario: CheckingOut
  Given the Cart with Products
  When I checkout
  Then the Checkout page is displayed
```

This DSL code defines the basic structure and functionalities for your e-commerce website. Each `entity` represents a significant component of your site, such as `Product`, `Cart`, and `Wishlist`. The `properties` within each entity define the attributes of that entity, like the product's `name`, `picture`, and `price`. The `actions` define the possible interactions with the entities, such as viewing product details, adding items to the cart or wishlist, and checking out.

The `Scenarios` outline specific user journeys or interactions with the system, providing a clear picture of how users interact with the entities and what outcomes to expect from these interactions. For example, the `ViewingProductDetails` scenario describes the process from viewing the product catalog to seeing a product's details.
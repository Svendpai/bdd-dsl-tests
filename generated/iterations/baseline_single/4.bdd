To create a DSL code based on the provided grammar for your e-commerce website for selling high-end office chairs, we need to define entities for the products (office chairs), reviews, shopping cart, and wishlist. We'll also define actions such as viewing products, adding to cart, adding to wishlist, checking out, and viewing details. Here's a basic representation:

```xtext
model OfficeChairsECommerce

// Entities
entity Product {
  properties: name*, picture*, price*, description, details
}
entity Review {
  properties: author*, content*, rating
}
entity ShoppingCart {
  actions: addProduct, removeProduct, checkout
  properties: products*
}
entity Wishlist {
  actions: addProduct, removeProduct
  properties: products*
}

// Product Details and Review Scenario
Scenario: ViewProductDetails
  Given the user is on the home page
  When I click on the product
  Then the user sees the product details page
  And the user sees reviews for the product

// Adding to Cart
Scenario: AddToCart
  Given the user is on the product details page
  When I add the product to the cart
  Then the product is in the shopping cart

// Adding to Wishlist
Scenario: AddToWishlist
  Given the user is on the product details page
  When I add the product to the wishlist
  Then the product is in the wishlist

// Checkout Scenario
Scenario: Checkout
  Given the user has products in the shopping cart
  When I checkout
  Then the purchase is completed
```

This DSL code outlines the core functionality of your e-commerce site, focusing on the scenarios you specified. It includes entities for the products, reviews, shopping cart, and wishlist, and defines actions such as adding products to the cart or wishlist, checking out, and viewing product details and reviews. The `properties` attribute lists the information each entity will hold, while the `actions` attribute defines the possible actions that can be performed on or with that entity. The scenarios then use these entities and actions to describe the interactions on your e-commerce site.
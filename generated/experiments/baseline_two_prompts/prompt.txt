====================
FIRST PROMPT
====================
grammar no.hal.bdd.BddDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate bddDsl "http://www.hal.no/bdd/BddDsl"

Model:
	('model' name = ID)
	(
		(modelRefs += ModelRef) |
		(entityDefs += EntityDef) |
		(scenarios += Scenario)
	)*
;

ModelRef:
	'using' modelRef = [Model]
;

EntityDef:
	'entity' name = (ID | STRING) ('-'WORD)? ('is' superEntities += [EntityDef] (',' superEntities += [EntityDef])*)? '{'
		('actions:' (actions += ActionDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') actions += ActionDef)*)?
		('states:' (states += StateDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') states += StateDef)*)?
		('properties:' (properties += PropertyDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') properties += PropertyDef)*)?
	'}'
;

ActionDef:
	name = WORD ('and'|'the')? (WORD)? (argument = WORD)? ((preposition = PREP)? | (optionalPref ?= '['? (preposition = PREP|'out'|'off'|'on' 'the' 'row') ']'?))	
	
;

PREP: ('on' | 'in' | 'from' | 'to' | 'into'|'for');
WORD: ID;



StateDef: postive = StateName PREP? ('/' negative = StateName)?;
StateName: name = (WORD) ('and'|'off')?  (WORD)?;

PropertyDef: name = WORD (plural ?= '*')?;

//

ID_OR_STRING: (ID | STRING);

Scenario:
       'Scenario:' name = ID_OR_STRING WORD? ('out'|'off'|'on'|'in'|'-'|'the'|'to' 'the'|'to')? WORD? ('off'|'on'|'in'|'-'|'the')? WORD? ('on'|'in'|'-'|'the')? WORD? ('in'|'-'|'the')? WORD?
       (((('Given''the'|'Given''I'|'Given') ('do' 'not')? ((OPTION)) | ('Given' ('the'|'all' 'the'|'I')? ('do' 'not')? preStateE = ScenarioState))
       'which' 'means')?
       (
       'Given' ('the'|'all' 'the')? preState = ScenarioState ('out'|'off'|'on'|'in'|'to' 'the'|'to')? (WORD? | WORD?('-'|'the')?WORD? | (WORD? 'in'? WORD?)) WORD?
       (('When' 'I') |('When' 'I' 'do' 'not')| ('When' 'the') | ('Given' 'I')) action = ScenarioAction 
       'Then' ('the'|'all' 'the')? (STRING)? postState = ScenarioState ('out'|'off'|'on'|'in'|'to' 'the'|'to')? (WORD? | WORD?('-'|'the')?WORD? | (WORD? 'in' WORD?)) WORD?
       )
       (
       	((('When' 'I'|'When' 'the'|'When'|'And''I') ('do' 'not')? ((OPTION))) | ((('When' 'I') |('When' 'I' 'do' 'not')| ('When' 'the') | ('Given' 'I')) actionE = ScenarioAction ))
       'which' 'means')?
      ( 'Given' ('the'|'all' 'the')? preState1 = ScenarioState ('out'|'off'|'on'|'in'|'to' 'the'|'to')? (WORD? | WORD?('-'|'the')?WORD? | (WORD? 'in'? WORD?)) WORD?
       (('When' 'I') |('When' 'I' 'do' 'not')| ('When' 'the') | ('Given' 'I')) action1 = ScenarioAction )
       'Then' ('the'|'all' 'the')? (STRING)? postState1 = ScenarioState ('out'|'off'|'on'|'in'|'to' 'the'|'to')? (WORD? | WORD?('-'|'the')?WORD? | (WORD? 'in' WORD?)) WORD?
       )?
       (((('Then''the'|'Then''I'|'Then') ('do' 'not')? ((OPTION)) | ('Then' ('the'|'all' 'the'|'I')? ('do' 'not')? preStateE1 = ScenarioState))
       'which' 'means')?
       ('Given' ('the'|'all' 'the')? preState2 = ScenarioState ('out'|'off'|'on'|'in'|'to' 'the'|'to')? (WORD? | WORD?('-'|'the')?WORD? | (WORD? 'in'? WORD?)) WORD?
       (('When' 'I') |('When' 'I' 'do' 'not')| ('When' 'the') | ('Given' 'I')) action2 = ScenarioAction )
       'Then' ('the'|'all' 'the')? (STRING)? postState2 = ScenarioState ('out'|'off'|'on'|'in'|'to' 'the'|'to')? (WORD? | WORD?('-'|'the')?WORD? | (WORD? 'in' WORD?)) WORD? 
       )?
;


ScenarioState:
	states += StatePhrase (('And'|'And' 'the') states += StatePhrase)*
;

ScenarioAction:
	actions += ActionPhrase (('And' 'I'|'And') actions += ActionPhrase)*
;

StatePhrase: ScenarioRef | EntityPropertyStatePhrase | EntityStatePhrase;


ScenarioRef:
	scenarioRef = [Scenario | ID_OR_STRING]
;

//ENTITY_IDENTITY: '#'? (INT | STRING);
ENTITY_IDENTITY: '#'? (INT | STRING);
OPTION:'#'? (INT | STRING) ;

EntityRef:
	 (WORD OPTION 'for' 'the')? ('for'|'of')? (('the'|'all' 'the') entity = [EntityDef | WORD] name = ENTITY_IDENTITY) | (name = ENTITY_IDENTITY)
;

EntityStatePhrase:
	(property = [PropertyDef | WORD]? ('of'|'of' 'the')? OPTION? ('for'|'for' 'the')? ('of'|'of' 'the'|'for' 'the'|'for'))? 
	entity = EntityRef ('is'|'are') 'not'? state = [StateName] WORD?
	
;

EntityPropertyStatePhrase:
	 property = [PropertyDef | WORD]? ('of'|'of' 'the')? OPTION? ('of'|'for' |'from'|'for' 'the'|'of' 'the')  entity = EntityRef
	((('is'|'is' 'not') value = PropertyValue WORD?) WORD? | (('are'|'are' 'not') (values += PropertyValue) WORD? | (',' values += PropertyValue)*) WORD?) 
;

//terminal UNCLOSED_STRING : '"' (!'"')* EOF;

PropertyValue: SimpleValue | ListValue | SetValue;

SimpleValue: IntValue | BooleanValue | StringValue;

ListValue:
	{ListValue} '[' (values += SimpleValue (',' values += SimpleValue)*)? ']'
;

SetValue:
	{SetValue} '{' (values += SimpleValue (',' values += SimpleValue)*)? '}'
;

StringValue:
	value = STRING
;

IntValue:
	value = INT
;

TRUE: ('true' | 'yes');
FALSE: ('false' | 'no');

BooleanValue:
	value = (TRUE | FALSE)
;

ActionPhrase: VerbAction | VerifyAction;

VerbAction:
	action = ActionRef 'and'? WORD? 'on'? (WORD'-'WORD)? ('for' 'the'| 'the'|'on')? (entity = EntityDef)? ('on'|'off'|'in')? entity = EntityRef ('on'|'off'|'in')? ('of'|'for'|'for' 'the'|'of' 'the')? PREP? entity = EntityRef?
;

ActionRef: verb = [ActionDef | WORD] 'on'? (argument = PropertyValue)? (preposition = PREP)? (('the'|'on')(entity = EntityDef))? ;

VerifyAction:
	'assure' state = StatePhrase
;
====================
RESPONSE
====================
This grammar definition for a domain-specific language (DSL) related to Behavior-Driven Development (BDD) appears to be designed for specifying models, entities, actions, states, properties, and scenarios in a structured format. The syntax is defined using Xtext, a framework for development of programming languages and domain-specific languages.

Here's a breakdown of the key components of the grammar:

1. **Model**: The top-level container that can include references to other models, entity definitions, and scenarios. A model is identified by a name.

2. **ModelRef**: Allows for referencing other models within a model, facilitating reuse and modularity.

3. **EntityDef**: Defines an entity within the model, which can have actions, states, and properties. Entities can inherit from other entities, allowing for a hierarchical organization.

4. **ActionDef**: Defines an action that can be performed, potentially with arguments and prepositions to provide context for the action.

5. **StateDef**: Describes the state of an entity, with the ability to define both positive and negative states.

6. **PropertyDef**: Specifies a property of an entity, which can be singular or plural.

7. **Scenario**: Represents a BDD scenario, including a name and a series of given-when-then steps that outline the preconditions, actions, and expected outcomes.

8. **ScenarioState**: Describes the state within a scenario, supporting complex phrases that can include references to entities, properties, and states.

9. **ScenarioAction**: Outlines actions within a scenario, allowing for combinations of actions to be specified.

10. **EntityRef**: Allows for referencing specific entities, potentially with identifiers for precision.

11. **EntityStatePhrase** and **EntityPropertyStatePhrase**: Used within scenarios to describe the state of entities or their properties.

12. **ActionPhrase**: Defines the actions within a scenario, which can be verb actions or verification actions.

The grammar uses a mix of keywords, identifiers (ID), strings (STRING), and custom tokens (such as WORD, PREP, OPTION) to construct the syntax. The use of various operators (e.g., '{', '}', '[', ']', '|', ',', 'and', 'the') and keywords (e.g., 'entity', 'actions:', 'states:', 'properties:', 'Scenario:') helps structure the language and make it readable for specifying BDD scenarios.

This DSL is likely intended for use within a specific tool or framework that supports BDD, allowing users to define behavior specifications in a structured, human-readable format. The grammar facilitates the creation of models that can be used for automated testing, documentation, and communication among stakeholders in a software development project.
====================
SECOND PROMPT
====================
Using the DSL grammar defined above, generate the DSL code necessary to satisfy the following requirements:

I want an e-commerce website for selling high-end office chairs. I want a home page where I can see a catalog of all the items. The items on the home page should only show their picture, the name of the product, and the price. When I click an item I want it to go to a full details page where I can see more information about the product, as well as reviews, and buy it. I want shopping cart and wishlist functionality, so I am also able to add items to my cart or wishlist and then check out when I'm done shopping.